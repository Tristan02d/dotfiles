#+title: Configuration Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/test-init.el

* Introduction

** Crédit

La grande majorité de ma configuration d'Emacs est tirée de celle de [[https://github.com/daviwil/dotfiles/blob/9776d65c4486f2fa08ec60a06e86ecb6d2c40085/Emacs.org][David Wilson]]. Sa série
de vidéos /[[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][emacs from scratch]]/ est une excellente aide pour commencer à configurer Emacs.

** Comment ça marche?

Le fichier que vous lisez est un fichier contenant des blocs de code qui sont automatiquement
écrits les uns à la suite des autres dans le fichier /init.el/ qui est le fichier dans lequel Emacs va
chercher la config. Cela me permet d'y voir clair dans le fichier de config pour le modifier plus
simplement et rapidement.

Vous êtes libres de copier ce que vous voulez dans ma config. Pour ce faire vous pouvez soit
aller voir les blocs qui vous intéressent dans ce fichier, soit vous pouvez directement aller
dans [[file:./.emacs.d/init.el][init.el]].

* Table des matières

#+OPTIONS: toc:2

* Démarrage (un peu) plus rapide

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

#+end_src

* Nettoyage du dossier /.emacs.d/

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

#+end_src

* Interface
** Nettoyage

#+begin_src emacs-lisp
(setq inhibit-startup-message t) ;; Enlever l'écran d'accueil
(scroll-bar-mode -1)  ;; Enlever la scrollbar
(tool-bar-mode -1)    ;; Enlever la barre d'outils
(tooltip-mode -1)     ;; Enlever les tooltips
(menu-bar-mode -1)    ;; Enlever la barre de menu
(save-place-mode 1)   ;; Mémoriser le dernier emplacement du curseur

#+end_src

** Numéros de lignes

#+begin_src emacs-lisp
;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Override some modes which derive from the above
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Plein écran

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
	      (lambda (frame)
		(with-selected-frame frame
		  (tr/set-theme)
		  ;; Emacs en plein écran (f11) par défaut
		  (toggle-frame-fullscreen))))
  (toggle-frame-fullscreen)
  (tr/set-theme))
#+end_src

* Raccourcis clavier

#+begin_src emacs-lisp
;; Raccourcis clavier
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(global-set-key (kbd "M-C-c") 'comment-or-uncomment-region)
(global-set-key (kbd "M-C-w") 'other-window)
(global-set-key (kbd "M-C-l") 'load-theme)
(global-set-key (kbd "M-C-v") 'eval-region)
(global-set-key (kbd "M-C-m") 'vterm)
(global-set-key (kbd "M-C-g a") 'org-agenda)
(global-set-key (kbd "M-C-g c") 'org-capture)

(global-set-key (kbd "C-p") 'kill-whole-line)
(setq kill-whole-line t)

(global-set-key (kbd "C-x K") 'kill-current-buffer)
(global-set-key (kbd "C-$") 'delete-other-windows)

;; Mettre automatiquement les parenthèses fermantes
(electric-pair-mode 1)

#+end_src

* Réglages pour les packages

Tout comme la majorité des distributions Linux, Emacs utilise des dépôts dans lesquels se trouve
des packages que nous pouvons installer pour ajouter des fonctionnalités. La plupart sont, à
l'instar d'Emacs, open source.

Les trois dépôts suivants contiennent 99% des packages que vous serez amenés à utiliser. Le
dépôt /org/ ne vous est pas nécessaire si vous n'utilisez pas le package /org/.

#+begin_src emacs-lisp
;; Initialisation des packages
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Which-key

#+begin_src emacs-lisp
;; Infos sur les raccourcis clavier
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

* Theme

** Installation des themes

#+begin_src emacs-lisp
;; Themes
(use-package monokai-pro-theme)
(use-package solo-jazz-theme)

#+end_src

** Charger le theme en fonction de l'heure de la journée

#+begin_src emacs-lisp
;; Récupérer l'heure qu'il est au lancement pour charger un theme en conséquence
(defun tr/set-theme ()
  (setq hour-at-start (decoded-time-hour (decode-time)))
  (if (and (<= 7 hour-at-start)
	   (>= 17 hour-at-start))

      (load-theme 'solo-jazz t)

    (load-theme 'monokai-pro t)
    )
  )

#+end_src>
* All the icons

Ce package permet aux autres packages d'afficher des icônes sympas. Lors du premier
chargement de ce package, il faut lancer la commande ~all-the-icons-install-fonts~
dans Emacs en faisant ~M-x~ puis en tapant la commande.

#+begin_src emacs-lisp
(use-package all-the-icons)

#+end_src

* Doom modeline

La barre d'infos au dessus du mini buffer est pas ouf par défaut. /Doom modeline/ la rend plus
belle et plus utile.

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode t)
  :custom ((doom-modeline-height 1)))

(display-time)
(display-battery-mode)

#+end_src

* Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))

#+end_src

* Rainbow delimiters

Colore les parenthèses en arc-en-ciel pour reconnaître les paires.

#+begin_src emacs-lisp
;; Parenthèses plus lisibles
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Ivy

/Ivy/ est l'un des packages les plus utilisés dans Emacs, il améliore énormément les fonctions
de  base comme par exemple le ~C-s~ pour chercher un mot dans un fichier.

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))

#+end_src

* Counsel et helpful

Idem mais pour d'autres types de fonctions.

#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
	 ("C-M-j" . counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

;; Meilleure description des commandes/touches
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Projectile

Une caractéristique très appréciée des IDE est le fait de pouvoir manipuler des projets. Ces projets
contiennent du code, d'autres fichiers et des méthodes pour les lancer ou les compiler. /Projectile/
ajoute cette notion de projet dans Emacs, ce qui permet par la suite de pouvoir compiler ou lancer
le projet en un simple raccourci clavier.

#+begin_src emacs-lisp
;; Ajouter la notion de projet à Emacs
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projets/")
    (setq projectile-project-search-path '("~/projets/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

*NB*: je mets personnellement mes projets dans ~\~/projets/~, si ce n'est pas votre cas,
pensez à modifier ce paragraphe en conséquences.

* Org

Beaucoup de choses à dire, je vous invite à regarder [[https://www.youtube.com/watch?v=VcgjTEa0kU4][les vidéos de David Wilson sur le sujet]].

** Fonctions

#+begin_src emacs-lisp
;; Org -----------------------------------------------------------------

;; Turn on indentation and auto-fill mode for Org files
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))

(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

#+end_src

** Partie principale

#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :commands (org-capture org-agenda)
  :config
  (setq org-support-shift-select t)
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/.dotfiles/agenda.org"
	  "~/projets/tristank/TODO.org"))

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")
       "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

  (efs/org-font-setup))

#+end_src

** Modifications des puces

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Centrer les buffers org-mode

#+begin_src emacs-lisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Org babel

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(C . t)
	(shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))

(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C")))

;; Automatically tangle our emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Complétion de code et autres

** Yasnippet

Permet de créer des raccourcis personnalisés. Par exemple, pour écrire une signature de
/main/ en C, il n'y a qu'à écrire ~main~ et faire ~TAB~.

#+begin_src emacs-lisp
;; Complétion de code et autres ----------------------------------------

;; Package qui sert à créer des espèces d'alias personnalisés
;; pour programmer plus vite
(use-package yasnippet
  :hook (lsp-mode . yas-minor-mode)
  :config
  (yas-reload-all))

(global-set-key (kbd "C-<tab>") 'yas-expand)

(use-package yasnippet-snippets)

#+end_src

** Lsp

Ajoute des features d'IDE à Emacs.

#+begin_src emacs-lisp
;; Lsp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp
  :hook (treemacs-mode . (display-line-numbers-mode nil)))

(use-package lsp-ivy
  :after lsp)

#+end_src

** Company
