#+title: Configuration Emacs
#+author: Tristan Riehs
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el

* Table des matières
:PROPERTIES:
:TOC:      :include all :depth 2
:END:
:CONTENTS:
- [[#table-des-matières][Table des matières]]
- [[#démarrage-un-peu-plus-rapide][Démarrage (un peu) plus rapide]]
- [[#démarrage-beaucoup-plus-rapide][Démarrage (beaucoup) plus rapide]]
- [[#nettoyage-du-dossier-emacsd][Nettoyage du dossier .emacs.d]]
- [[#interface][Interface]]
  - [[#nettoyage][Nettoyage]]
  - [[#numéros-de-lignes][Numéros de lignes]]
- [[#réglages-pour-les-packages][Réglages pour les packages]]
- [[#raccourcis-clavier][Raccourcis clavier]]
  - [[#base][Base]]
  - [[#evil-mode][Evil-mode]]
- [[#no-littering][No littering]]
- [[#which-key][Which-key]]
- [[#police][Police]]
- [[#theme][Theme]]
  - [[#installation-des-themes][Installation des themes]]
  - [[#charger-le-theme-en-fonction-de-lheure-de-la-journée][Charger le theme en fonction de l'heure de la journée]]
  - [[#chargement-du-theme-et-fenêtre-en-plein-écran][Chargement du theme et fenêtre en plein écran]]
- [[#all-the-icons][All the icons]]
- [[#dired][Dired]]
- [[#doom-modeline][Doom modeline]]
- [[#expand-region][Expand region]]
- [[#rainbow-delimiters][Rainbow delimiters]]
- [[#beacon][Beacon]]
- [[#ivy][Ivy]]
- [[#counsel-et-helpful][Counsel et helpful]]
- [[#projectile][Projectile]]
- [[#org][Org]]
  - [[#fonctions][Fonctions]]
  - [[#partie-principale][Partie principale]]
  - [[#modifications-des-puces][Modifications des puces]]
  - [[#centrer-les-buffers-org-mode][Centrer les buffers org-mode]]
  - [[#org-babel][Org babel]]
  - [[#org-make-toc][Org-make-toc]]
- [[#markdown][Markdown]]
- [[#grip-mode][Grip-mode]]
- [[#complétion-de-code-et-autres][Complétion de code et autres]]
  - [[#yasnippet][Yasnippet]]
  - [[#lsp][Lsp]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#helm][Helm]]
- [[#configuration-des-langages][Configuration des langages]]
  - [[#c][C]]
  - [[#python][Python]]
  - [[#latex][LaTeX]]
  - [[#bash][Bash]]
  - [[#java][Java]]
  - [[#emacs-lisp][Emacs-lisp]]
  - [[#c][C#]]
  - [[#typescript][TypeScript]]
  - [[#javascript][JavaScript]]
  - [[#haskell][Haskell]]
- [[#templates-de-fichiers][Templates de fichiers]]
- [[#terminal][Terminal]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
- [[#git][Git]]
  - [[#magit][Magit]]
  - [[#magit-todos][Magit-todos]]
- [[#afficher-le-temps-de-lancement][Afficher le temps de lancement]]
  - [[#mode-gui][Mode GUI]]
  - [[#mode-client][Mode client]]
  - [[#faire-ce-quil-faut-selon-le-type-de-lancement][Faire ce qu'il faut selon le type de lancement]]
:END:

* Démarrage (un peu) plus rapide

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Silence compiler warnings as they can be pretty disruptive
(setq native-comp-async-report-warnings-errors nil)

#+end_src

* Démarrage (beaucoup) plus rapide

Pour pouvoir lancer Emacs beaucoup plus rapidements (en environ 0.2s au lieu de  2 à 3s), on peut
le lancer en arrière plan. Le process en arrière plan est lancé grâce à la commande ~emacs --daemon~
du script [[./startup.sh][startup.sh]]. Cela permet de charger la configuration une unique fois au démarrage du PC au
lieu de la charger à chaque ouverture d'Emacs. Il y a toutefois une subtilité: si après avoir lancé le
processus en arrière-plan, vous relancer Emacs en mode GUI, par exemple avec la commande ~emacs~,
vous n'utiliserez pas la config chargée par le processus en arrière plan. Pour pouvoir ouvrir Emacs et se
"rattacher" à ce processus, il faut le lancer en mode client avec la commande ~emacsclient -c~.

#+begin_src emacs-lisp
  (setq server-client-instructions nil)
#+end_src

* Nettoyage du dossier /.emacs.d/

#+begin_src emacs-lisp
;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

#+end_src

* Interface
** Nettoyage

#+begin_src emacs-lisp
(setq inhibit-startup-message t) ;; Enlever l'écran d'accueil
(scroll-bar-mode -1)  ;; Enlever la scrollbar
(tool-bar-mode -1)    ;; Enlever la barre d'outils
(tooltip-mode -1)     ;; Enlever les tooltips
(menu-bar-mode -1)    ;; Enlever la barre de menu
(save-place-mode 1)   ;; Mémoriser le dernier emplacement du curseur

#+end_src

** Numéros de lignes

#+begin_src emacs-lisp
  ;; Enable line numbers for some modes
  (dolist (mode '(prog-mode-hook
                  lsp-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (column-number-mode 1)
#+end_src

* Réglages pour les packages

Tout comme la majorité des distributions Linux, Emacs utilise des dépôts dans lesquels se trouvent
des packages que nous pouvons installer pour ajouter des fonctionnalités.

Les trois dépôts suivants contiennent 99% des packages que vous serez amenés à utiliser. Le
dépôt /org/ ne vous est pas nécessaire si vous n'utilisez pas le package /org/.

#+begin_src emacs-lisp
;; Initialisation des packages
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Raccourcis clavier

** Base

#+begin_src emacs-lisp
    ;; Raccourcis clavier
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (global-set-key (kbd "M-C-c") 'comment-or-uncomment-region)
    (global-set-key (kbd "M-C-v") 'eval-region)
    (global-set-key (kbd "M-C-g a") 'org-agenda)
    (global-set-key (kbd "M-C-g c") 'org-capture)
    (global-set-key (kbd "C-x K") 'kill-current-buffer)
    (global-set-key (kbd "C-$") 'delete-other-windows)

    ;; Mettre automatiquement les parenthèses fermantes
    (electric-pair-mode 1)

    ;; Ne pas confirmer la fermeture des buffers ayant un processus
    (setq kill-buffer-query-functions nil)

#+end_src

** Evil-mode

Permet de mieux gérer les raccourcis clavier. Ajoute les raccourcis par défaut de Vim.

#+begin_src emacs-lisp
  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

  (use-package evil
    :init
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    ;; Disable arrow keys in normal and visual modes
    ;;   (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
    ;;   (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
    ;;   (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    ;; :init
    ;; (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    ;; :custom
    ;; (evil-collection-outline-bind-tab-p nil)
    :config
    ;; (delete 'lispy evil-collection-mode-list)
    ;; (delete 'org-present evil-collection-mode-list)
    (evil-collection-init))

#+end_src

* No littering

#+begin_src emacs-lisp
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering)

#+end_src

* Which-key

#+begin_src emacs-lisp
;; Infos sur les raccourcis clavier
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

* Police

#+begin_src emacs-lisp
  (defun tr/set-faces ()
    (set-face-attribute 'default nil
                        :font "Ubuntu Mono"
                        :height 128))

#+end_src

* Theme

** Installation des themes

#+begin_src emacs-lisp
  ;; Themes
  (use-package monokai-pro-theme)
  (use-package solo-jazz-theme)

  (advice-add 'rainbow-turn-on :after  #'solo-jazz-theme-rainbow-turn-on)
  (advice-add 'rainbow-turn-off :after #'solo-jazz-theme-rainbow-turn-off)
#+end_src

** Charger le theme en fonction de l'heure de la journée

#+begin_src emacs-lisp
;; Récupérer l'heure qu'il est au lancement pour charger un theme en conséquence
(defun tr/set-theme ()
  (setq hour-at-start (decoded-time-hour (decode-time)))
  (if (and (<= 7 hour-at-start)
	   (>= 17 hour-at-start))

      (load-theme 'solo-jazz t)

    (load-theme 'monokai-pro t)
    )
  )

#+end_src
** Chargement du theme et fenêtre en plein écran

#+begin_src emacs-lisp
  (defun tr/emacs-client-frame-setup ()
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (tr/set-theme)
                  (tr/set-faces)
                  (setq doom-modeline-icon t)
                  (toggle-frame-fullscreen)))))

  (defun tr/emacs-gui-frame-setup ()
    (toggle-frame-fullscreen)
    (tr/set-theme)
    (tr/set-faces))

#+end_src

* All the icons

Ce package permet aux autres packages d'afficher des icônes sympas. Lors du premier
chargement de ce package, il faut lancer la commande ~all-the-icons-install-fonts~
dans Emacs en faisant ~M-x~ puis en tapant la commande.

#+begin_src emacs-lisp
(use-package all-the-icons)

#+end_src

* Dired

Naviguer entre les fichiers plus facilement.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config
    (setq dired-listing-switches "-agho --group-directories-first"
          dired-kill-when-opening-new-dired-buffer t
          dired-omit-mode t)

    (evil-collection-define-key 'normal 'dired-mode-map
                                "h" 'dired-single-up-directory
                                "l" 'dired-single-buffer))

  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :after dired
    :config
    (setq dired-open-extensions '(("png" . "gimp")
                                  ("pdf" . "evince"))))

#+end_src

* Doom modeline

La barre d'infos au dessus du mini buffer est pas ouf par défaut. /Doom modeline/ la rend plus
belle et plus utile.

#+begin_src emacs-lisp
   (use-package diminish)

   (use-package doom-modeline
   :init
   (setq doom-modeline-buffer-encoding nil)
   :custom
   (display-time-mode 1)
   (display-battery-mode 1)
   (doom-modeline-height 1)
   (doom-modeline-mode 1))

#+end_src

* Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-[" . er/expand-region)
         ("C-(" . er/mark-outside-pairs)))

#+end_src

* Rainbow delimiters

Colore les parenthèses en arc-en-ciel pour reconnaître les paires.

#+begin_src emacs-lisp
;; Parenthèses plus lisibles
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Beacon

#+begin_src emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1))
#+end_src

* Ivy

/Ivy/ est l'un des packages les plus utilisés dans Emacs, il améliore énormément les fonctions
de  base comme par exemple le ~C-s~ pour chercher un mot dans un fichier.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

#+end_src

* Counsel et helpful

Idem mais pour d'autres types de fonctions.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           ("C-M-l" . counsel-load-theme)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  ;; Meilleure description des commandes/touches
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Projectile

Une caractéristique très appréciée des IDE est le fait de pouvoir manipuler des projets. Ces projets
contiennent du code, d'autres fichiers et des méthodes pour les lancer ou les compiler. /Projectile/
ajoute cette notion de projet dans Emacs, ce qui permet par la suite de pouvoir compiler ou lancer
le projet en un simple raccourci clavier.

#+begin_src emacs-lisp
;; Ajouter la notion de projet à Emacs
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projets/")
    (setq projectile-project-search-path '("~/projets/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src

*NB*: je mets personnellement mes projets dans ~~/projets/~, si ce n'est pas votre cas,
pensez à modifier ce paragraphe en conséquences.

* Org

Beaucoup de choses à dire, je vous invite à regarder [[https://www.youtube.com/watch?v=VcgjTEa0kU4][les vidéos de David Wilson sur le sujet]].

** Fonctions

#+begin_src emacs-lisp
  ;; Org -----------------------------------------------------------------

  ;; Turn on indentation and auto-fill mode for Org files
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Ubuntu Mono" :weight 'regular :height (cdr face))))

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

#+end_src

** Partie principale

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :commands (org-capture org-agenda)
    :config
    (setq org-support-shift-select t)
    (setq org-ellipsis " ▾")

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/.dotfiles/agenda.org"
            "~/projets/tristank/TODO.org"))

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/projets/truc.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)))

    (efs/org-font-setup))

#+end_src

** Modifications des puces

#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Centrer les buffers org-mode

#+begin_src emacs-lisp
(defun efs/visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/visual-fill))

#+end_src

** Org babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (shell . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("cc" . "src C")))

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal buffer-file-name "/home/tristan/.dotfiles/emacs.org")
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Org-make-toc

#+begin_src emacs-lisp
  (use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))

#+end_src

* Markdown

Emacs permet sans ajout de package d'éditer des fichiers markdown, cette config se contente de
centrer les buffers markdown. Souvent, les fichiers markdown finissent en /.md/.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure nil
    :hook (markdown-mode . efs/visual-fill))
  
#+end_src

* Grip-mode

Permet d'avoir une preview des fichiers README de GitHub.

#+begin_src emacs-lisp
  (use-package grip-mode)
#+end_src

* Complétion de code et autres

** Yasnippet

Permet de créer des raccourcis personnalisés. Par exemple, pour écrire une signature de
/main/ en C, il n'y a qu'à écrire ~main~ et faire ~TAB~.

#+begin_src emacs-lisp
  ;; Complétion de code et autres ----------------------------------------

  ;; Package qui sert à créer des espèces d'alias personnalisés
  ;; pour programmer plus vite
  (use-package yasnippet
    :hook (lsp-mode . yas-minor-mode)
    :config
    (yas-load-directory "~/.dotfiles/.emacs.d/custom-snippets/")
    (yas-reload-all))

  (global-set-key (kbd "C-<tab>") 'yas-expand)

  (use-package yasnippet-snippets)

#+end_src

** Lsp

Ajoute des fonctionnalités d'IDE à Emacs.

#+begin_src emacs-lisp
;; Lsp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :after lsp
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

(use-package lsp-treemacs
  :after lsp
  :hook (treemacs-mode . (display-line-numbers-mode nil)))

(use-package lsp-ivy
  :after lsp)

#+end_src

** Company

#+begin_src emacs-lisp
;; Complétion
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Flycheck

Vérification de syntaxe.

#+begin_src emacs-lisp
(use-package flycheck
  :after lsp)

#+end_src

** Helm

#+begin_src emacs-lisp
(use-package helm-lsp
  :after lsp)

(use-package helm
  :after lsp
  :config (helm-mode))

#+end_src

* Configuration des langages

Le package /lsp-mode/ installé plus haut dans la section [[#lsp][Lsp]] s'applique sur [[https://emacs-lsp.github.io/lsp-mode/page/languages/][différents langages]].
Certains, comme le C, ne requièrent pas de configuration externe à Emacs. D'autres, comme LaTeX,
requièrent quelques manipulations afin de pouvoir être supportés.

** C

#+begin_src emacs-lisp
  ;; C -------------------------------------------------------------------

  (add-hook 'c-mode-hook 'lsp-deferred) 

#+end_src

** Python

#+begin_src emacs-lisp
  ;; Python --------------------------------------------------------------

(setq python-shell-interpreter "python3")

(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))

#+end_src

** LaTeX

Pour que /lsp-mode/ supporte LaTeX, il y a plusieurs méthodes. Pour ma part j'ai télécharger [[https://github.com/latex-lsp/texlab/releases][ici]] le fichier qui convient à mon système. Je l'ai ensuite décompressé et déplacé dans un dossier faisant
partie du /exec-path/. Le /exec-path/ est une liste de dossiers dans lesquels Emacs va chercher des
choses dont il a besoin, c'est le cousin du /PATH/ en Bash. Pour connaître cette liste il faut ouvrir
Emacs et faire ~M-x~ puis taper ~describe-variable~, faire entrée et taper ~exec-path~ puis faire
à nouveau entrée. Un nouveau buffer va s'ouvrir avec en haut une liste de répertoires. Ajoutez le
fichier que vous avez décompressé a l'un de ces répertoires. Plus d'infos [[https://github.com/latex-lsp/texlab][ici]].

#+begin_src emacs-lisp
;; LaTeX ---------------------------------------------------------------

(use-package lsp-latex
  :hook ((latex-mode tex-mode) .
	 (lambda () (require 'lsp-latex) (lsp))))

#+end_src

** Bash

Pour que /lsp-mode/ supporte Bash, il suffit d'installer le package /npm/ (je rappelle que je suis sur Ubuntu), puis d'ouvrir un script Bash dans Emacs. Lorsque /lsp-mode/ essaiera de se lancer, il vous
demandera si il peut installer /bash-ls/ automatiquement, dites-lui oui et ce sera bon. Pour que /lsp-mode/ se lance, il faut soit avoir la config qui suit dans son /init.el/ auquel cas il se lancera
automatiquement à l'ouverture d'un script Bash, soit le lancer à la main, dans le
buffer du script Bash, en faisant ~M-x~ puis ~lsp~ puis entrée.

#+begin_src emacs-lisp
;; Bash ----------------------------------------------------------------

(add-hook 'sh-mode-hook 'lsp)

#+end_src

** Java

#+begin_src emacs-lisp
;; Java ----------------------------------------------------------------

(use-package lsp-java
  :hook (java-mode . lsp-deferred))

#+end_src

** Emacs-lisp

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)
#+end_src

** C#

#+begin_src emacs-lisp
(use-package csharp-mode
  :hook (csharp-mode . lsp-deferred))

#+end_src

** TypeScript

#+begin_src emacs-lisp
(use-package typescript-mode
  :hook (typescript-mode . lsp-deferred))

#+end_src

** JavaScript

#+begin_src emacs-lisp
(use-package js2-mode
  :hook (js-mode . lsp-deferred))

#+end_src

** Haskell

#+begin_src emacs-lisp
  (use-package lsp-haskell)
  (add-hook 'haskell-mode-hook 'lsp-deferred)
#+end_src

* Templates de fichiers

#+begin_src emacs-lisp
  (auto-insert-mode 1)

  (use-package yatemplate
    :config
    (yatemplate-fill-alist))
  
#+end_src

* Terminal

** Eshell

#+begin_src emacs-lisp
;; Terminal ------------------------------------------------------------

;; eshell
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))

#+end_src
** Vterm

Vterm nécessite notamment d'avoir sur votre machine les packages suivants /Cmake/, /libtool/
et /gcc/. Plus d'infos [[https://github.com/akermu/emacs-libvterm][ici]]. De plus, ayant installé [[https://www.youtube.com/watch?v=zfm2E4E7Dok&t=966s][powerline]] dans mon terminal, j'ai du adapté mon [[./.bashrc][bashrc]] parce que powerline est moche dans vterm. Qui plus est, dans Emacs j'utilise Git via
/Magit/ donc powerline n'est pas utile. Par rapport à /eshell/, /vterm/ a deux avantages majeurs: il
est plus performant et charge automatiquement le /bashrc/. Ainsi vous pouvez notamment
directement utiliser vos [[./.bash_aliases][alias]].

#+begin_src emacs-lisp
;; vterm
(use-package vterm)
(define-key vterm-mode-map (kbd "C-q") #'vterm-send-next-key)
(define-key vterm-mode-map (kbd "C-M-j") #'counsel-switch-buffer)

#+end_src

* Git

Là encore, beaucoup de choses à dire, heureusement que David Wilson est [[https://www.youtube.com/watch?v=INTu30BHZGk&t=1421s][là]].

** Magit

#+begin_src emacs-lisp
;; Magit - package qui permet d'utiliser git plus efficacement

(use-package magit)

#+end_src

** Magit-todos

#+begin_src emacs-lisp
  (use-package magit-todos)
  
#+end_src

* Afficher le temps de lancement

Petit truc plutôt cool qui affiche le temps de lancement dans le mini buffer.

** Mode GUI

#+begin_src emacs-lisp
;; Afficher le temps de lancement --------------------------------------

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs (GUI) lancé en  %s."
                     (format "%.2f secondes"
			     (float-time
			      (time-subtract after-init-time before-init-time))))))

#+end_src

** Mode client

*Ne fonctionne par pour le moment.*

#+begin_src emacs-lisp
  (defun tr/display-client-startup-time ()
    (defvar before-frame-time)
    (add-hook 'before-make-frame-hooks '(setq before-frame-time (current-time)))
    (add-hook 'after-make-frame-hooks
              (lambda (frame)
                (with-selected-frame frame
                  (message "Emacs (client) lancé en %s."
                       (format "%.2f secondes"
                               (float-time
                                (time-subtract
                                 (current-time) before-frame-time))))))))
#+end_src

*Attention:* sur mon PC portable j'ai un mode économie d'énergie qui a le facheux défaut de ralentir considérablement le temps de lancement d'Emacs en mode GUI. Le temps de lancement passe de 2s à plus de 5s.

** Faire ce qu'il faut selon le type de lancement

#+begin_src emacs-lisp
  (defun tr/emacs-client-setup ()
    (tr/emacs-client-frame-setup)
    (tr/display-client-startup-time))

  (defun tr/emacs-gui-setup ()
    (tr/emacs-gui-frame-setup))

  (if (daemonp)
      (tr/emacs-client-setup)
    (tr/emacs-gui-setup))
  
#+end_src
